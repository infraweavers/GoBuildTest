name: Build, Package and Optionally Release

on:
  push:
    branches:
      - "*"
    tags:
      - "*"

jobs:

  get-version-number:

    runs-on: windows-latest

    needs: get-commit-sha

    outputs:
      revision: ${{ steps.get-revision.outputs.revision }}
      minor: ${{ steps.get-minor-version.outputs.minor }}
      major: ${{ steps.get-major-version.outputs.major }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - id: get-revision
        run: |
          $firstCommitSha = "1d7353dbbab0c42645a02dd40613226dcd6cdbc8"
          $lastCommitSha = ((Invoke-WebRequest -uri https://api.github.com/repos/infraweavers/GoBuildTest/git/refs/heads/master -UseBasicParsing).Content | ConvertFrom-Json).object.sha
          $response = Invoke-WebRequest -uri https://api.github.com/repos/infraweavers/GoBuildTest/compare/${firstCommitSha}...${lastCommitSha} -UseBasicParsing
          echo "::set-output name=revision::$( ($response.Content | ConvertFrom-Json).total_commits )"

      - id: get-minor-version
        run: echo "::set-output name=minor::1"

      - id: get-major-version
        run: echo "::set-output name=major::0"

      - id: get-version
        run: echo "::set-output name=version::${{steps.get-major-version.outputs.major}}.${{steps.get-minor-version.outputs.minor}}.${{steps.get-revision.outputs.revision}}-${{ needs.get-commit-sha.outputs.short-sha }}"

  get-commit-sha:

    runs-on: ubuntu-latest

    outputs:
      short-sha: ${{ steps.short-sha.outputs.sha }}

    steps:
        
      - id: short-sha
        uses: benjlevesque/short-sha@v1.2
        with:
          length: 7

  build-release:
  
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [linux]
        arch: [amd64]

    runs-on: ubuntu-latest
    
    env:
        SRCPATH: ${{ github.workspace }}/go/src/gobuildtest

    steps:

      - id: install-go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
            
      - id: checkout-code
        uses: actions/checkout@v2
        with:
          path: ${{ env.SRCPATH }}

      - id: dependencies-and-build
        run: |
          os=${{ matrix.os }}
          arch=${{ matrix.arch }}
          goversion=${{ matrix.go-version }}
          echo "Building $os-$arch-$goversion"
          
          suffix=$([ "$os" == "windows" ] && echo ".exe" || echo "")
          mkdir -p ./release/gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-BIN
          cp ${{ env.SRCPATH }}/README.md ./release/gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-BIN/.
          
          pushd ${{ env.SRCPATH }}
          
          GO111MODULE=on GOOS=$os GOARCH=$arch go get ./...
          GO111MODULE=on GOOS=$os GOARCH=$arch go build -o ${{ env.SRCPATH }}/gobuildtest$suffix
          popd
          cp ${{ env.SRCPATH }}/gobuildtest$suffix ./release/gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-BIN/gobuildtest$suffix

      - id: upload-builds
        uses: actions/upload-artifact@v2
        with:
          name: "gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-BIN"
          path: release/gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-BIN/
          if-no-files-found: error

  make-release:

    runs-on: ubuntu-latest

    needs: [build-release, get-version-number, get-commit-sha]
    
    outputs:
      release-upload-url: ${{ steps.create-release.outputs.upload_url }}
      
    steps:
      - id: create-release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        with:
          draft: true
          prerelease: false
          release_name: "${{needs.get-version-number.outputs.major}}.${{needs.get-version-number.outputs.minor}}.${{needs.get-version-number.outputs.revision}}"
          tag_name: "${{needs.get-version-number.outputs.major}}.${{needs.get-version-number.outputs.minor}}.${{needs.get-version-number.outputs.revision}}-${{ needs.get-commit-sha.outputs.short-sha }}"
          
        env:
          GITHUB_TOKEN: ${{ github.token }}

  upload-binary-release-assets:

    strategy:
      matrix:
        go-version: [1.17.x]
        os: [linux]
        arch: [amd64]

    runs-on: ubuntu-latest

    needs: [get-commit-sha,get-version-number,make-release]

    steps:

      - id: download-release-binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/download-artifact@v2
        with:
          name: "gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-${{needs.get-version-number.outputs.version}}-BIN"

      - id: create-release-archive
        if: startsWith(github.ref, 'refs/tags/')
        run: tar cvzf ./gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-${{needs.get-version-number.outputs.version}}-BIN.tar.gz ./*

      - id: upload-binary-release-asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.make-release.outputs.release-upload-url }}
          asset_path: "./gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-${{needs.get-version-number.outputs.version}}-BIN.tar.gz"
          asset_name: "gobuildtest-${{ matrix.os }}-${{ matrix.arch }}-Go${{ matrix.go-version }}-${{needs.get-version-number.outputs.version}}-BIN.tar.gz"
          asset_content_type: application/octet-stream
